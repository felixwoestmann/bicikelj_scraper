conn <- dbConnect(RSQLite::SQLite(), "bicikle_scraper_output/20221015_journeys.db")
journeys<-dbGetQuery(conn, "SELECT * FROM Journeys")
journeys$timestampStart=ymd_hms(journeys$timestampStart)
journeys$timestampEnd=ymd_hms(journeys$timestampEnd)
from=round(min(journeys$timestampStart),"hour")-hours(1)
to=round(max(journeys$timestampStart),"hour")+hours(1)
breaks=seq(from, to, by="30 min")
journey_timechunks<-split(journeys,cut(journeys$timestampStart, breaks))
journey_timechunks
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 50, min = 0, max = 100))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
journey_timechunks[1]
journey_timechunks[2]
journey_timechunks[10]
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 50, min = 0, max = length(journey_timechunks)))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks))),
mainPanel(tableOutput('head',label="Head"))
)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks))),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks))),
mainPanel(tableOutput('head'),textOutput('numberJourneys'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-nrow(journey_timechunks[input$hour])
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks))),
mainPanel(tableOutput('head'),textOutput('numberJourneys'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[input$hour])})
}
shinyApp(ui, server)
library(RSQLite)
library(plotly)
library(dplyr)
library(lubridate)
# Load Stations
stations<-read.table('bicikle_scraper_output/ljubljana_station_data_static.csv',sep=',',header=T)
# Load Journeys
conn <- dbConnect(RSQLite::SQLite(), "bicikle_scraper_output/20221015_journeys.db")
journeys<-dbGetQuery(conn, "SELECT * FROM Journeys")
journeys$timestampStart=ymd_hms(journeys$timestampStart)
journeys$timestampEnd=ymd_hms(journeys$timestampEnd)
from=round(min(journeys$timestampStart),"hour")-hours(1)
to=round(max(journeys$timestampStart),"hour")+hours(1)
breaks=seq(from, to, by="30 min")
journey_timechunks<-split(journeys,cut(journeys$timestampStart, breaks))
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks)),
textOutput('numberJourneys')),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[input$hour])})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks)),
textOutput('numberJourneys',label="de")),
mainPanel(tableOutput('head'))
)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks)),
textOutput('numberJourneys')),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[input$hour])})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks)),
textOutput('numberJourneys'),
textOutput('nameOfChunk')),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[input$hour])})
output$nameOfChunk<-renderText({names(journey_timechunks)[input$hour]})
}
shinyApp(ui, server)
View(journey_timechunks)
nrow(journey_timechunks[2])
nrow(journey_timechunks[4])
nrow(journey_timechunks[[4]])
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 0, min = 0, max = length(journey_timechunks)),
textOutput('numberJourneys'),
textOutput('nameOfChunk')),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[[input$hour]])})
output$nameOfChunk<-renderText({names(journey_timechunks)[input$hour]})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 1, min = 1, max = length(journey_timechunks)),
p('Label'),
textOutput('numberJourneys'),
textOutput('nameOfChunk')),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[[input$hour]])})
output$nameOfChunk<-renderText({names(journey_timechunks)[input$hour]})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 1, min = 1, max = length(journey_timechunks)),
p('Number of Journeys started in this period:'),
textOutput('numberJourneys'),
fluidRow(p('Name of chunk:'),
textOutput('nameOfChunk'))),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[[input$hour]])})
output$nameOfChunk<-renderText({names(journey_timechunks)[input$hour]})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 1, min = 1, max = length(journey_timechunks)),
p('Number of Journeys started in this period:'),
textOutput('numberJourneys'),
fluidRow(column(6,p('Name of chunk:')),
column(6,textOutput('nameOfChunk'))
)),
mainPanel(tableOutput('head'))
)
server <- function(input, output, session) {
output$head<-renderTable({journey_timechunks[input$hour]})
output$numberJourneys<-renderText({nrow(journey_timechunks[[input$hour]])})
output$nameOfChunk<-renderText({names(journey_timechunks)[input$hour]})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput('plot',label='Plot')
)
server <- function(input, output, session) {
output$plot<-hist(journey_timechunks)
}
shinyApp(ui, server)
library(RSQLite)
library(plotly)
library(dplyr)
library(lubridate)
# Load Stations
stations<-read.table('bicikle_scraper_output/ljubljana_station_data_static.csv',sep=',',header=T)
# Load Journeys
conn <- dbConnect(RSQLite::SQLite(), "bicikle_scraper_output/20221015_journeys.db")
journeys<-dbGetQuery(conn, "SELECT * FROM Journeys")
journeys$timestampStart=ymd_hms(journeys$timestampStart)
journeys$timestampEnd=ymd_hms(journeys$timestampEnd)
from=round(min(journeys$timestampStart),"hour")-hours(1)
to=round(max(journeys$timestampStart),"hour")+hours(1)
breaks=seq(from, to, by="30 min")
journey_timechunks<-split(journeys,cut(journeys$timestampStart, breaks))
rows<-lapply(journey_timechunks, nrow)
library(shiny)
ui <- fluidPage(
plotOutput('plot',label='Plot')
)
server <- function(input, output, session) {
output$plot<-hist(journey_timechunks)
}
library(shiny)
ui <- fluidPage(
plotOutput('plot',label='Plot')
)
server <- function(input, output, session) {
output$plot<-hist(rows)
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput('plot',label='Plot')
)
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-hist(rows)
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-hist(unlist(rows))
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-hist(unlist(rows))
}
shinyApp(ui, server)
library(RSQLite)
library(plotly)
library(dplyr)
library(lubridate)
# Load Stations
stations<-read.table('bicikle_scraper_output/ljubljana_station_data_static.csv',sep=',',header=T)
# Load Journeys
conn <- dbConnect(RSQLite::SQLite(), "bicikle_scraper_output/20221015_journeys.db")
journeys<-dbGetQuery(conn, "SELECT * FROM Journeys")
journeys$timestampStart=ymd_hms(journeys$timestampStart)
journeys$timestampEnd=ymd_hms(journeys$timestampEnd)
from=round(min(journeys$timestampStart),"hour")-hours(1)
to=round(max(journeys$timestampStart),"hour")+hours(1)
breaks=seq(from, to, by="30 min")
journey_timechunks<-split(journeys,cut(journeys$timestampStart, breaks))
rows<-lapply(journey_timechunks, nrow)
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-hist(unlist(rows))
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-renderPlot({hist(unlist(rows))})
}
shinyApp(ui, server)
unlist(rows)
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-renderPlot({barplot(unlist(rows)))})
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-renderPlot({barplot(unlist(rows)))})
library(shiny)
ui <- fluidPage(
plotOutput('plot')
)
server <- function(input, output, session) {
output$plot<-renderPlot({barplot(unlist(rows))})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", value = 1, min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({barplot(unlist(rows))})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({barplot(unlist(rows))})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
range<-input$hour
print(range)
barplot(unlist(rows))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
range<-input$hour
barplot(unlist(rows[range]))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[1]
barplot(unlist(rows[range[rangeFrom:rangeTo]]))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[1]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(sublist))
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[1]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(sublist))
})
}
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[1]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(sublist))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[1]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(subList))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[2]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(subList))
})
}
shinyApp(ui, server)
names(rows)
library(glue)
lapply(names(rows),function(element) { glue('{hour(element)}') })
lapply(names(rows),function(element) { glue('{hour(element):minute(element)}') })
lapply(names(rows),function(element) { glue('mday(element).month(element) {hour(element):minute(element)}') })
rows<-lapply(journey_timechunks, nrow)
lapply(names(rows),function(element) { glue('{mday(element)}.{month(element)} {hour(element):minute(element)}') })
lapply(names(rows),function(element) { glue('{mday(element)}.{month(element)} {hour(element)}:{minute(element)}') })
lapply(names(rows),function(element) { glue('{mday(element)}.{month(element)}.{year(element)} {hour(element)}:{minute(element)}') })
library(plotly)
library(dplyr)
library(lubridate)
library(glue)
# Load Stations
stations<-read.table('bicikle_scraper_output/ljubljana_station_data_static.csv',sep=',',header=T)
# Load Journeys
conn <- dbConnect(RSQLite::SQLite(), "bicikle_scraper_output/20221015_journeys.db")
journeys<-dbGetQuery(conn, "SELECT * FROM Journeys")
journeys$timestampStart=ymd_hms(journeys$timestampStart)
journeys$timestampEnd=ymd_hms(journeys$timestampEnd)
from=round(min(journeys$timestampStart),"hour")-hours(1)
to=round(max(journeys$timestampStart),"hour")+hours(1)
breaks=seq(from, to, by="30 min")
journey_timechunks<-split(journeys,cut(journeys$timestampStart, breaks))
rows<-lapply(journey_timechunks, nrow)
names(rows)<-lapply(names(rows),function(element) { glue('{mday(element)}.{month(element)}.{year(element)} {hour(element)}:{minute(element)}') })
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[2]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(subList))
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[2]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(subList))
})
}
shinyApp(ui, server)
library(RSQLite)
library(plotly)
library(dplyr)
library(lubridate)
library(glue)
# Load Stations
stations<-read.table('bicikle_scraper_output/ljubljana_station_data_static.csv',sep=',',header=T)
# Load Journeys
conn <- dbConnect(RSQLite::SQLite(), "bicikle_scraper_output/20221015_journeys.db")
journeys<-dbGetQuery(conn, "SELECT * FROM Journeys")
journeys$timestampStart=ymd_hms(journeys$timestampStart)
journeys$timestampEnd=ymd_hms(journeys$timestampEnd)
from=round(min(journeys$timestampStart),"hour")-hours(1)
to=round(max(journeys$timestampStart),"hour")+hours(1)
breaks=seq(from, to, by="30 min")
journey_timechunks<-split(journeys,cut(journeys$timestampStart, breaks))
rows<-lapply(journey_timechunks, nrow)
names(rows)<-lapply(names(rows),function(element) { glue('{mday(element)}.{month(element)}.{year(element)} {hour(element)}:{minute(element)}') })
library(shiny)
ui <- fluidPage(
sidebarPanel(sliderInput("hour", label="Hour", min = 1, max = length(rows),value = c(1, 2))),
mainPanel(plotOutput('plot'))
)
server <- function(input, output, session) {
output$plot<-renderPlot({
rangeFrom<-input$hour[1]
rangeTo<-input$hour[2]
subList<-rows[rangeFrom:rangeTo]
barplot(unlist(subList))
})
}
shinyApp(ui, server)
